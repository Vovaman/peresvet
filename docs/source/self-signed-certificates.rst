.. _self-signed-certificates:

Создание самоподписанных сертификатов
=====================================
Для работы платформы в защищённом режиме необходимо подготовить сертификаты.

Быстрый запуск
++++++++++++++
Допустим, все компоненты платформы запускаются на одном компьютере.
На этом же компьютере уже есть папка с проектом ``mpc-peresvet``.

Тогда запустить платформу в безопасном режиме очень просто:

#. Заходим в папку проекта ``certificates`` и запускаем скрипт ``gen_crt.sh``:

   ::

      mpc-peresvet$ cd certificates
      mpc-peresvet/certificates$ ./gen_crt.sh

#. В корневой папке проекта открываем файл ``.env`` и правим в нём переменную
   ``SRV_NAME`` - впишите имя вашего компьютера
   (оно содержится в файле ``/etc/hostname``):

   ::

      SRV_NAME=<имя_вашего_компьютера>

#. В корневой папке проекта запускаем скрипт ``run_ssl.sh``:

   ::

      mpc-peresvet$ ./run_ssl.sh

Платформа запустится в режиме односторонней аутентификации.

В случае, если нужно повысить уровень безопасности, можно включить двустороннюю
аутентификацию, то есть когда сервер и клиент проверяют сертификаты друг друга.
Для этого в файле ``.env`` перед запуском ``run_ssl.sh`` необходимо
поправить ещё две переменные:

::

  UVICORN_CERT_REQUIRED=1
  NGINX_CERT_REQUIRED=on

Описание работы скриптов генерации сертификатов
+++++++++++++++++++++++++++++++++++++++++++++++
Теперь подробней рассмотрим выполненные шаги.

Рассмотрим ситуацию, когда платформа, а также её клиенты
(поставщики и потребители данных) находятся в сети, изолированной
от интернета, а также не имеющей своего сервера DNS.

Необходимо организовать общение платформы с клиентами по шифрованному каналу.

Для корректной работы всех компонентов нам необходимо:

#. Сертификат центра сертификации. Так называемый "корневой" сертификат.
#. Сертификат сервера, на котором будут работать контейнеры нашей платформы.
#. Для случая двухсторонней аутентификации, когда сервер и клиент проверяют
   сертификаты друг друга - ещё и сертификат клиента.

Все необходимые действия выполняются одним скриптом: ``gen_crt.sh`` в папке
проекта ``mpc-peresvet`` ``certificates``.

Скрипт ``gen_crt.sh`` запускает последовательно три других скрипта из папки
``certificates``:

#. ``01. gen_root.sh``
#. ``02. gen_server.sh``
#. ``03. gen_client.sh``

При запуске всех трёх скриптов применяются параметры по умолчанию, описанные
ниже.

01. gen_root.sh
~~~~~~~~~~~~~~~
Скрипт создаёт корневой сертификат. То есть сертификат центра сертификации.

.. code-block:: bash

   $ ./01.\ gen_root.sh -d 3654 -k 4096 -s "/CN=root_ca_center"

``d`` - срок в днях, на сколько выдаётся сертификат;

``k`` - длина ключа шифрования;

``s`` - имя центра сертификации в том виде, как его принимает утилита ``openssl``.

У каждого параметра указано его значение по умолчанию.

02. gen_server.sh
~~~~~~~~~~~~~~~~~
Скрипт создаёт сертификат для сервера, на котором будет работать платформа.
Сертификат подписывается корневым сертификатом, созданным предыдущим скриптом.

.. code-block:: bash

   $ ./02.\ gen_server.sh -h <имя_компьютера> -d 3654 -k 4096 -s "/CN=<имя_компьютера>"

``h`` - имя сервера, для которого генерируется сертификат, по умолчанию берётся
имя компьютера, на котором запускаетс скрипт;

``d`` - срок в днях, на сколько выдаётся сертификат;

``k`` - длина ключа шифрования;

``s`` - имя сервера в том виде, как его принимает утилита ``openssl``.

У каждого параметра указано его значение по умолчанию.

03. gen_client.sh
~~~~~~~~~~~~~~~~~
Скрипт создаёт сертификат клиента, который необходим для случая двусторонней
аутентификации.

.. code-block:: bash

   $ 03.\ gen_client.sh  -d 3654 -k 4096 -s "/CN=client<some_GUID>"

``d`` - срок в днях, на сколько выдаётся сертификат;

``k`` - длина ключа шифрования;

``s`` - имя клиента в том виде, как его принимает утилита ``openssl``,
  в случае отсутствия этого ключа для идентификации клиента генерируется
  новый GUID.

  .. note::

     Прокси сервер Nginx будет передавать имя клиента в платформу, добавляя
     к запросу заголовок ``X-SSL-Client``.

У каждого параметра указано его значение по умолчанию.

Структура папки с сертификатами
+++++++++++++++++++++++++++++++
В результате работы скриптов в корневой папке проекта будет создана папка
``tls`` примерно следующего содержания:

::

   tls   # общая папка для всех сертификатов
     - clients # папка для сертификатов клиентов
        - CN=client-e6d661ae-e6f4-4f05-8647-324ce7aa31b9 # папка сертификата конкретного клиента
            client.crt # сертификат клиента
            client.csr # запрос на подпись сертификата (можно удалить)
            client.key # секретный ключ клиента
     - rootCA
        - rootCA.crt # корневой сертификат центра СА
        - rootCA.key # секретный ключ центра
     - servers # папка для сертификатов серверов
        - <server_name> # папка сертификата конкретного сервера
          - <server_name>.crt # сертификат сервера
          - <server_name>.csr # запрос на подпись (можно удалить)
          - <server_name>.key # секретный ключ сервера
          - <server_name>.pem # пакет из сертификата и ключа сервера

Все сертификаты и ключи - в формате PEM.

Подключение клиента к платформе
+++++++++++++++++++++++++++++++
Процедура, которую необходимо выполнить перед тем, как работать в безопасном
режиме с платформой, зависит от клиентского приложения.

Например, утилита командной строки ``curl`` работает с системным хранилищем
сертификатов центров сертификации. Поэтому для работы ``curl`` необходимо
поместить сертификат нашего локального центра сертификации
в локальное хранилище:

.. code-block:: bash

   $ sudo cp tls/rootCA.crt /usr/local/share/ca-certificates/
   $ sudo update-ca-certificates

Популярные браузеры используют собственные хранилища корневых сертификатов.
Поэтому необходимо ознакомиться с инструкцией для конкретного браузера, как
добавить в его хранилище сертификат ``tls/rootCA/rootCA.crt``, а для случая
двусторонней аутентификации - ещё и клиентский сертификат.

В общем случае, лучше ознакомиться с инструкцией на конкретную программу, как
она работает с сертификатами.
