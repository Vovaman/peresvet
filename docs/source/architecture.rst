.. include:: <isonum.txt>

Архитектура платформы
=====================
Общее описание
--------------
Архитектура платформы обуславливается, в значительной степени, создаваемой
ей моделью технического объекта.

Модель технического объекта состоит из двух частей: статической и динамической.
Статическая модель описывает сущности и экземпляры этих сущностей,
а динамическая - процессы, протекающие между экземплярами сущностей.

Статическая модель
------------------
Статическая модель технических объектов, особенно в промышленности, хорошо
описывается иерархической структурой. К примеру:

``Предприятие`` |rarr| ``Цех`` |rarr| ``Участок`` |rarr|
``Технологическая линия`` |rarr| ``Агрегат``.

Поэтому в архитектуре появляется LDAP-сервер, с помощью которого
строится иерархия.

.. include:: pics/architecture.png








Платформа представляет собой совокупность сервисов.
В основном, каждый сервис работает с какой-либо сущностью, представленной
в иерархической модели объекта.

В общем случае для каждой сущности создаётся 4 микросервиса:

#. **<сущность>_api_crud**

   Сервис обеспечивает API для команд create-read-update-delete для
   работы с экземплярами сущности в иерархической модели.

   Каждый сервис типа ``api_crud`` выполняет две задачи:

      #. проверяет корректность входных данных запроса;

         В случае реализации на языке Python эту задачу удобно выполнять с
         помощью модуля ``Pydantic``.

      #. посылает соответствующее сообщение сервису ``<сущность>_model_crud``;

         В случае команд ``create`` и ``read`` сообщение выполняется по
         RPC-шаблону (команда ``create`` возвращает id вновь созданного
         экземпляра сущности, команда ``read`` возвращает результат поиска).

         В случае же команд ``update`` и ``delete`` ответа от
         ``<сущность>_model_crud`` не ожидается.

#. **<сущность>_model_crud**

   Сервис обеспечивает функциональность для работы с экземплярами сущности
   в иерархической модели при выполнении команд CRUD.

#. **<сущность>_app**

   Сервис реализует логику работы сущности, то есть ту функциональность, ради
   которой и создаются экземпляры сущности.

   К примеру, для сущности **тревоги** этот сервис реализует логику
   возникновения/квитирования/пропадания тревог.

#. **<сущность>_app_api**

   Сервис реализует команды для работы с сущностью, не входящие в группу
   CRUD.

   Для сущности **тревоги** это команды: получения списка активных тревог,
   квитирования тревоги и т.д.

Сервисы общаются между собой через брокер сообщений
`RabbitMQ <https://www.rabbitmq.com/>`_.

Каждый сервис создаёт exchange (здесь и далее - обменник) со своим именем и
с типом, указанным в конфигурации сервиса в переменной ``pub_exchange_type``.

В документации на каждый сервис указано, какие сообщения он публикует, а также
на какие сообщения и от каких сервисов подписывается.
