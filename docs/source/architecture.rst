.. include:: <isonum.txt>

Архитектура платформы
=====================
Общее описание
--------------
Архитектура платформы обуславливается, в значительной степени, создаваемой
ей моделью технического объекта.

Модель технического объекта состоит из двух частей: статической и динамической.
Статическая модель описывает сущности и экземпляры этих сущностей,
а динамическая - процессы, протекающие между экземплярами сущностей.

Статическая модель
------------------
Статическая модель технических объектов, особенно в промышленности, хорошо
описывается иерархической структурой. К примеру:

``Предприятие`` |rarr| ``Цех`` |rarr| ``Участок`` |rarr|
``Технологическая линия`` |rarr| ``Агрегат``.

Поэтому в архитектуре появляется LDAP-сервер, с помощью которого
строится иерархия.

.. figure:: pics/architecture_01.png
    :align: center

    LDAP-сервер

Каждый узел в иерархии LDAP-сервера имеет свой определённый класс.
На рисунке ниже представлена иерархия узлов, у каждого узла в скобках указан
его класс.

В скобках указан класс узла.

.. figure:: pics/architecture_02.png
    :align: center

    Иерархия

На рисунке выше показан пример иерархии. Белыми квадратами показаны экземпляры
сущности ``object`` (класс в иерархии - ``prsObject``), голубыми - теги,
красными - тревоги (alerts), зелёными - методы.

.. note::
   Имена всех классов в иерархии строятся по принципу: ``prs<Имя сущности>``.
   Префикс ``prs`` облегчает фильтрацию классов, добавленных в схему сервера
   платформой.
   Имена атрибутов также имеют префикс ``prs``.

1. Главный узел - ``Участок металлообработки``. Класс - ``prsObject``.
2. ``Участок`` содержит два тега:

   * ``Суммарная мощность`` (всех станков на участке);
   * ``Температура помещения``.
3. Тег ``Участок металлообработки.Суммарная мощность`` имеет метод для
   вычисления суммы мощностей всех станков на участке.
4. Тег ``Участок металлообработки.Температура помещения`` имеет тревогу
   ``Превышение температуры``, которая срабатывает при превышении некоторого
   установленного значения.
5. У объекта ``Участок`` - два дочерних объекта: ``Станок 1`` и ``Станок 2``.
6. Каждый станок имеет два тега:

   * ``Потребляемая мощность``;
   * ``Ток фазы``.
7. Tег ``Ток фазы`` имеет тревогу ``Превышение тока``, которая, в свою очередь,
   имеет метод ``Оповещение``.

Таким образом, в примере иерархии содержатся экземпляры четырёх сущностей:
``objects``, ``tags``, ``alerts``, ``methods``.

Сервисы
-------
Каждая сущность, присутствующая в иерархии, управляется своим сервисом.

.. figure:: pics/architecture_03.png
    :align: center

    Сервисы

В действительности, каждый сервис - это, в общем случае, набор из четырёх
независимых микросервисов:

.. figure:: pics/architecture_04.png
    :align: center

    Микросервисы

<сущность>_api_crud
~~~~~~~~~~~~~~~~~~~
Микросервис, принимающий от пользователя или, в общем, от любых внешних
клиентов, запросы на создание, чтение, обновление, удаление экземпляров
сущности (команды CRUD).

Главная задача этого микросервиса - принять запрос от клиента и проверить
корректность параметров запроса (в случае, если миросервис реализован
на языке Python, то удобно для этих целей пользоваться модулем ``pydantic``).

Вторая задача - отправить соответствующий запрос микросервису
``<сущность>_model_crud``:

.. figure:: pics/architecture_05.png
    :align: center

    <сущность>_api_crud

Выделение описанной функциональности в отдельный микросервис облегчает
управление версиями API, позволяя, в том числе, работать одновременно
нескольким версиям. Вопрос только в запуске/остановке соответствующего
микросервиса.

<сущность>_model_crud
~~~~~~~~~~~~~~~~~~~~~
Микросервис, работающий с узлами сущности в иерархии. Именно этот сервис
реализует непосредственную работу с иерархической моделью, взаимодействуя
с LDAP-сервером.

.. figure:: pics/architecture_06.png
    :align: center

    <сущность>_model_crud

<сущность>_app
~~~~~~~~~~~~~~
Иерархическая модель - не вещь в себе. Узлы в ней создаются не только для
того, чтобы просто быть, они определяют, как функционирует сама модель.
То есть микросервис ``<сущность>_app`` определяет ту функциональность, ради
которой экземпляры сущности и создаются.
Например, для тегов это, в первую очередь, функции записи/чтения данных.
Для тревог - функциональность по инициации/квитированию/прападанию тревог.

Таким образом, сервис ``<сущность>_app`` читает из иерархии описания
узлов соответствующего типа и работает согласно этим описаниям.
Например, к тегу ``Температура помещения`` привязана тревога
``Превышение температуры``. Так вот именно сервис ``<сущность>_app`` будет
отслеживать значение температуры и генерировать, при необходимости, тревогу.

.. figure:: pics/architecture_07.png
    :align: center

    <сущность>_app




Платформа представляет собой совокупность сервисов.
В основном, каждый сервис работает с какой-либо сущностью, представленной
в иерархической модели объекта.

В общем случае для каждой сущности создаётся 4 микросервиса:

#. **<сущность>_api_crud**

   Сервис обеспечивает API для команд create-read-update-delete для
   работы с экземплярами сущности в иерархической модели.

   Каждый сервис типа ``api_crud`` выполняет две задачи:

      #. проверяет корректность входных данных запроса;

         В случае реализации на языке Python эту задачу удобно выполнять с
         помощью модуля ``Pydantic``.

      #. посылает соответствующее сообщение сервису ``<сущность>_model_crud``;
         В случае команд ``create`` и ``read`` сообщение выполняется по
         RPC-шаблону (команда ``create`` возвращает id вновь созданного
         экземпляра сущности, команда ``read`` возвращает результат поиска).

         В случае же команд ``update`` и ``delete`` ответа от
         ``<сущность>_model_crud`` не ожидается.

#. **<сущность>_model_crud**

   Сервис обеспечивает функциональность для работы с экземплярами сущности
   в иерархической модели при выполнении команд CRUD.

#. **<сущность>_app**

   Сервис реализует логику работы сущности, то есть ту функциональность, ради
   которой и создаются экземпляры сущности.

   К примеру, для сущности **тревоги** этот сервис реализует логику
   возникновения/квитирования/пропадания тревог.

#. **<сущность>_app_api**

   Сервис реализует команды для работы с сущностью, не входящие в группу
   CRUD.

   Для сущности **тревоги** это команды: получения списка активных тревог,
   квитирования тревоги и т.д.

Сервисы общаются между собой через брокер сообщений
`RabbitMQ <https://www.rabbitmq.com/>`_.

Каждый сервис создаёт exchange (здесь и далее - обменник) со своим именем и
с типом, указанным в конфигурации сервиса в переменной ``pub_exchange_type``.

В документации на каждый сервис указано, какие сообщения он публикует, а также
на какие сообщения и от каких сервисов подписывается.
